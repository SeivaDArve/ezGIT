#!/bin/bash

# Alias to use directly as git alias

# Vai ser tambem definido em .../DRYa/all/source-all-drya-files
   alias ezGIT="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
   alias ezgit="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
   alias     G="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"        
   alias  GvA.="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh v A ."  # This alias is meant to help drya-termux-omni-key to call this script

alias gh="less ${v_REPOS_CENTER}/ezGIT/all/etc/config-bash-alias"  # Read this file itself, providing help
alias g="git"
alias gst="git status"
alias gpom="git pull origin master"
alias gdf="git diff"
alias gch="git checkout"
alias gchb="git checkout -b"
alias gac="git add . && git commit -m"
alias grs="git restore staged"
alias gre="git restore"
alias gcl="git clone"
alias glgg="git log --graph --abbrev-commit --decorate --format=fotmat:'%C(bold green)%h%C(reset) - %C(cold cyan)%aD%C(reset) %C(bold yellow)(%ar)%C(reset)%C(auto)%%d%C(reset)%n''		%C(white)%s%C(reset)		%C(dim white)- %an%C(reset)' --all"
alias gmr="git merge"
alias gfc="git fetch"
alias gbr="git branch"
alias glg="git log"
alias gkp='touch .gitkeep; echo " > file .gitkeep created"'
alias gdf="git diff"
alias ggb="# uDev: git global"
alias gbr="# uDev: Change branch"
alias gfv="# uDev: List favoutite commands"
alias gst="git stash" # When local has 1 commit and remote has 1 commit and now you cannot pull nor push. First you stash, than pull, then git stash apply, then push
alias gsa="git stash apply" 
alias gcmu="G ++ u 2; G p" # Only commit with automatic commmit: uDev comments   
alias gcmb="G ++ b 2; G p" # Only commit with automatic commmit: blind commit
alias gcms="G ++ s 2; G p" # Only commit with automatic commmit: same as last commit
alias gad="git add"
alias ggo="clear; echo 'ezGIT: blindly pull changes'; git add --all; git commit -m 'bling update'; stroken; git push"

alias gcm="git commit -m"

function f_alias_gcm {
   # Terminal command `gcm` means `git commit -m`
   #
   # In case it is presented with one argumente, commit it as one argument
   #  > `git commit -m "text as only one commit"`
   #
   # In case multiple arguments were given, join them all as one commit
   #  > `git commit text to join as only one argument`
   #
   
   echo uDev
}
   
